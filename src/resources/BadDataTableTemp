package us.fringe.service.base.db

import com.github.javafaker.Faker
import slick.jdbc.PostgresProfile.api._

import java.time.{LocalDateTime, ZoneOffset}
import java.util.UUID
import scala.util.Random

class PointReceiptTable(tag: Tag)
    extends Table[PointReceiptRecord](tag, Some("salesforce"), "points_receipt__c") {
  def createdDate = column[Option[LocalDateTime]]("createddate")
  def isDeleted = column[Boolean]("isdeleted")
  def name = column[Option[String]]("name")
  def systemModstamp = column[Option[LocalDateTime]]("systemmodstamp")
  def benefitId = column[Option[String]]("benefit__c")
  def contactId = column[String]("contact__c")
  def benefitHerokuId = column[Option[String]]("benefit__r__heroku_id__c")
  def pointsSpent = column[Double]("points_spent__c")
  def sfid = column[Option[String]]("sfid")
  def id = column[Long]("id", O.PrimaryKey, O.AutoInc)
  def hcLastop = column[Option[String]]("_hc_lastop")
  def hcErr = column[Option[String]]("_hc_err")
  def pointTermId = column[Option[String]]("points__c")
  def pointTermHerokuId = column[Option[String]]("points__r__heroku_id__c")
  def herokuId = column[Option[String]]("heroku_id__c")
  def givenToPointTermId = column[Option[String]]("points_given_to__c")
  def givenToPointTermHerokuId = column[Option[String]]("points_given_to__r__heroku_id__c")
  def giftOrderId = column[Option[String]]("gift_order_id__c")
  def * =
    (
      createdDate,
      isDeleted,
      name,
      systemModstamp,
      benefitId,
      contactId,
      benefitHerokuId,
      pointsSpent,
      sfid,
      id,
      hcLastop,
      hcErr,
      pointTermId,
      pointTermHerokuId,
      herokuId,
      givenToPointTermId,
      givenToPointTermHerokuId,
      giftOrderId
    ) <> (PointReceiptRecord.tupled, PointReceiptRecord.unapply)
}

case class PointReceiptRecord(
    createdDate: Option[LocalDateTime],
    isDeleted: Boolean,
    name: Option[String],
    systemModstamp: Option[LocalDateTime],
    benefitId: Option[String],
    contactId: String,
    benefitHerokuId: Option[String],
    pointsSpent: Double,
    sfid: Option[String],
    id: Long,
    hcLastop: Option[String],
    hcErr: Option[String],
    pointTermId: Option[String],
    pointTermHerokuId: Option[String],
    herokuId: Option[String],
    givenToPointTermId: Option[String],
    givenToPointTermHerokuId: Option[String],
    giftOrderId: Option[String]
)

class PointReceiptFactory(val db: Database, val faker: Faker) {
  val pointReceipts = TableQuery[PointReceiptTable]

  def create(
      createdDate: Option[LocalDateTime] = Some(LocalDateTime.now(ZoneOffset.UTC)),
      isDeleted: Boolean = false,
      name: Option[String] = Some(f"PR - ${UUID.randomUUID().toString.substring(0, 7)}"),
      systemModstamp: Option[LocalDateTime] = Some(LocalDateTime.now(ZoneOffset.UTC)),
      benefitId: Option[String] = Some(UUID.randomUUID().toString.substring(0, 17)),
      contactId: String = UUID.randomUUID().toString.substring(0, 17),
      benefitHerokuId: Option[String] = None,
      pointsSpent: Double = 0.0,
      sfid: Option[String] = Some(UUID.randomUUID().toString.substring(0, 17)),
      id: Long = Random.nextInt().toLong,
      hcLastop: Option[String] = Some("SYNCED"),
      hcErr: Option[String] = None,
      pointTermId: Option[String] = Some(UUID.randomUUID().toString.substring(0, 17)),
      pointTermHerokuId: Option[String] = None,
      herokuId: Option[String] = Some(UUID.randomUUID().toString.substring(0, 17)),
      givenToPointTermId: Option[String] = Some(UUID.randomUUID().toString.substring(0, 17)),
      givenToPointTermHerokuId: Option[String] = None,
      giftOrderId: Option[String] = None
  ) = {
    val pointReceiptRecord = PointReceiptRecord(
      createdDate = createdDate,
      isDeleted = isDeleted,
      name = name,
      systemModstamp = systemModstamp,
      benefitId = benefitId,
      contactId = contactId,
      benefitHerokuId = benefitHerokuId,
      pointsSpent = pointsSpent,
      sfid = sfid,
      id = id,
      hcLastop = hcLastop,
      hcErr = hcErr,
      pointTermId = pointTermId,
      pointTermHerokuId = pointTermHerokuId,
      herokuId = herokuId,
      givenToPointTermId = givenToPointTermId,
      givenToPointTermHerokuId = givenToPointTermHerokuId,
      giftOrderId = giftOrderId
    )

    val insertAction = pointReceipts returning pointReceipts += pointReceiptRecord
    db.run(insertAction)
  }
}
